{"version":3,"sources":["components/Header.js","actions/index.js","actions/types.js","components/TradeEnter.js","components/MainPage.js","components/TradeView.js","App.js","serviceWorker.js","reducers/index.js","reducers/createTradeReducer.js","index.js"],"names":["Header","className","style","padding","Component","fetchTrades","type","TradeEnter","onSubmit","formValues","props","createTrade","input","label","name","margin","width","this","handleSubmit","Field","component","renderInput","to","connect","state","trades","payload","reduxForm","form","MainPage","TradeView","renderTrades","console","log","map","trade","Ticker","App","path","exact","Boolean","window","location","hostname","match","combineReducers","action","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducer","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uOAiBeA,E,uKAbP,OACI,4BAAQC,UAAU,gCAAgCC,MAAO,CAAEC,QAAQ,WAC/D,2CAGA,sF,GAPKC,a,0BCKRC,EAAc,WACvB,MAAO,CAACC,KCRgB,iBCMtBC,E,4MAEFC,SAAW,SAAAC,GACP,EAAKC,MAAMC,YAAYF,I,6DAGK,IAAnBG,EAAkB,EAAlBA,MAAWC,GAAO,EAAZC,KAAY,EAAPD,OAEpB,OACI,yBAAKZ,UAAU,QAAQC,MAAO,CAACa,OAAO,YAAaC,MAAO,QACtD,+BAAQH,GACR,0BAAWD,M,+BAQnB,OACQ,0BAAMJ,SAAUS,KAAKP,MAAMQ,aAAaD,KAAKT,UAAWP,UAAU,WAC9D,kBAACkB,EAAA,EAAD,CAAOL,KAAK,SAASD,MAAM,sBAAsBO,UAAWH,KAAKI,cACjE,kBAACF,EAAA,EAAD,CAAOL,KAAK,sBAAsBD,MAAM,wBAAwBO,UAAWH,KAAKI,cAChF,kBAACF,EAAA,EAAD,CAAOL,KAAK,uBAAuBD,MAAM,yBAAyBO,UAAWH,KAAKI,cAClF,kBAACF,EAAA,EAAD,CAAOL,KAAK,YAAYD,MAAM,cAAcO,UAAWH,KAAKI,cAC5D,4BAAQpB,UAAU,qBAAlB,UACA,kBAAC,IAAD,CAAMqB,GAAG,qBAAT,iB,GA1BKlB,aAsCVmB,eANU,SAAAC,GACrB,MAAO,CACHC,OAAQD,EAAMC,UAIiB,CAACd,YFzCZ,SAAAF,GACzB,MAAO,CAACH,KCHkB,gBDGCoB,QAASjB,IEwCaJ,eAArCkB,CAAmDI,YAAU,CAACC,KAAM,mBAAjBD,CAAqCpB,IC/BxFsB,E,uKARP,OACI,6BACI,kBAAC,IAAD,CAAMP,GAAG,sBAAT,0B,GAJOlB,aCCjB0B,E,4MAMFC,aAAe,WAEb,OADCC,QAAQC,IAAI,EAAKvB,MAAMe,OAAO,kBACxB,EAAKf,MAAMe,OAAOS,KAAI,SAAAC,GACxB,OACI,6BACI,4BAAKA,EAAMC,a,kEARtBnB,KAAKP,MAAML,gB,+BAgBX,OACI,6BACKY,KAAKc,oB,GArBE3B,aAiCTmB,eANS,SAAAC,GACpB,MAAO,CACHC,OAAQD,EAAMC,UAIiB,CAACpB,eAAzBkB,CAAuCO,GChBvCO,MAbf,WACE,OACE,yBAAKpC,UAAU,IACb,kBAAC,EAAD,MACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqC,KAAK,SAASC,OAAK,EAACnB,UAAWS,IACtC,kBAAC,IAAD,CAAOS,KAAK,qBAAqBC,OAAK,EAACnB,UAAWb,IAClD,kBAAC,IAAD,CAAO+B,KAAK,oBAAoBC,OAAK,EAACnB,UAAWU,OCHvCU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCdSC,G,OAAAA,YAAgB,CAC3BpB,OCFW,WAAyB,IAAxBD,EAAuB,uDAAf,GAAIsB,EAAW,uCACnC,OAAOA,EAAOxC,MACV,IPJqB,gBOKjB,MAAM,GAAN,mBAAWkB,GAAX,CAAiBsB,EAAOpB,UAC5B,IPPoB,eOQhB,OAAO,YAAIF,GACf,QACI,OAAOA,IDJfI,KAAKmB,OEIHC,EAAmBP,OAAOQ,sCAAwCC,IAClEC,EAAQC,YACZC,EACAL,EAAiBM,gBAGnBC,IAASC,OACL,kBAAC,IAAD,CAAUL,MAAOA,GACjB,kBAAC,EAAD,OAEFM,SAASC,eAAe,SH+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,a","file":"static/js/main.87730ebc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <header className=\"ui header center aligned blue\" style={{ padding:'40px 0'}}>\r\n                <h1>\r\n                    Trade Buddy\r\n                </h1>\r\n                <h4>\r\n                    Organize  Stock Trades and Keep Track of Progress\r\n                </h4>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import {CREATE_TRADES,FETCH_TRADES} from './types';\r\n\r\n\r\nexport const createTrade =  formValues =>  {\r\n   return {type:CREATE_TRADES,payload: formValues}\r\n}\r\n\r\nexport const fetchTrades = () => {\r\n    return {type:FETCH_TRADES}\r\n}","export const FETCH_TRADES = 'FETCH_TRADES';\r\nexport const CREATE_TRADES = 'CREATE_TRADES';","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Field,reduxForm} from 'redux-form';\r\nimport {createTrade,fetchTrades} from '../actions/index';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass TradeEnter extends Component {\r\n\r\n    onSubmit = formValues => {\r\n        this.props.createTrade(formValues);\r\n    }\r\n\r\n    renderInput({input,name,label}){\r\n\r\n        return (\r\n            <div className=\"field\" style={{margin:'20px 50px', width: '50%'}}>\r\n                <label>{label}</label>\r\n                <input {...input}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /** handleSubmit is a prop off of redux-form,  here I'm using it as a replacement for preventDefault */\r\n\r\n    render() {\r\n        return (  \r\n                <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form\">\r\n                    <Field name=\"Ticker\" label=\"Enter Ticker/Symbol\" component={this.renderInput}/>\r\n                    <Field name=\"BuyPrice/ShortPrice\" label=\"Buy Price/Short Price\" component={this.renderInput}/>\r\n                    <Field name=\"SellPrice/CoverPrice\" label=\"Sell Price/Cover Price\" component={this.renderInput}/>\r\n                    <Field name=\"#OfShares\" label=\"# of Shares\" component={this.renderInput}/>\r\n                    <button className=\"ui button primary\">Submit</button>\r\n                    <Link to=\"/pages/trade_view\">to pages</Link>\r\n                </form>\r\n        );  \r\n    }\r\n}\r\n\r\nconst mapStateToProps =  state => {\r\n    return {\r\n        trades: state.trades\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,{createTrade,fetchTrades})(reduxForm({form: 'enterTradesForm'})(TradeEnter));\r\n\r\n","import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass MainPage extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Link to='/pages/trade_enter'>Enter Your Trades</Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainPage;","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux'\r\nimport {fetchTrades} from '../actions/index';\r\n\r\nclass TradeView extends Component {\r\n\r\n    componentDidMount(){\r\n        this.props.fetchTrades(); \r\n    }\r\n\r\n    renderTrades = () => {\r\n       console.log(this.props.trades,\"renderFunction\");\r\n      return this.props.trades.map(trade =>{\r\n           return (\r\n               <div>\r\n                   <h2>{trade.Ticker}</h2>\r\n               </div>\r\n           );\r\n       });\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderTrades()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        trades: state.trades\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,{fetchTrades})(TradeView);","import React from 'react';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport Header from './components/Header';\nimport TradeEnter from './components/TradeEnter';\nimport MainPage from './components/MainPage';\nimport TradeView from './components/TradeView'; \n\n\nfunction App() {\n  return (\n    <div className=\"\">\n      <Header/>\n        <BrowserRouter>\n          <Route path=\"/pages\" exact component={MainPage}/>\n          <Route path='/pages/trade_enter' exact component={TradeEnter}/>\n          <Route path=\"/pages/trade_view\" exact component={TradeView}/>\n        </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux';\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport createTradeReducer from '../reducers/createTradeReducer';\r\n\r\nexport default combineReducers({\r\n    trades: createTradeReducer,\r\n    form:formReducer\r\n});","import {FETCH_TRADES,CREATE_TRADES} from '../actions/types';\r\nimport _ from 'lodash';\r\n\r\nexport default (state = [], action) => {\r\n    switch(action.type){\r\n        case CREATE_TRADES:\r\n            return [...state,action.payload];\r\n        case FETCH_TRADES:\r\n            return [...state];\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware,compose} from 'redux';\nimport reducer from './reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducer,\n  composeEnhancers(applyMiddleware())\n);\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}